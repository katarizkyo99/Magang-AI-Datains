# -*- coding: utf-8 -*-
"""Chatbot RAG Database.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qW5IcPDPknzNgkRQSFGBXGXSnQb7N8st
"""


import os
import gradio as gr
from dotenv import load_dotenv

from sqlalchemy import (
    create_engine,
    MetaData,
    Table,
    Column,
    String,
    Integer,
    select,
)

engine = create_engine("sqlite:///film_database.db")
metadata_obj = MetaData()

from llama_index.core import SQLDatabase


from llama_index.llms.groq import Groq

messages = [
            {"role": "system", "content": "Gunakan Database untuk referensi menjawab"},
            {"role": "system", "content": history_message},
            {"role": "user", "content": query_result},
        ]

llm = Ollama(model="llama3.2:1b")

llm = Groq(model="llama3-70b-8192", api_key="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")

from decimal import Decimal

table_name = "film"
film_table = Table(
    table_name,
    metadata_obj,
    Column("Movie_Name", String(49), primary_key=True),
    Column("Genres", String(90)),
    Column("Revenue", Integer, nullable=False),
    Column("Vote_Average", Integer),
    extend_existing=True
)
metadata_obj.create_all(engine)

sql_database = SQLDatabase(engine, include_tables=["film"])

sql_database = SQLDatabase(engine, include_tables=["film"])
from sqlalchemy import insert

rows = [
    {
        "Movie_Name": "Nosferatu",
        "Genres": ','.join(["Fantasy", "Horror", "Mystery"]),
        "Revenue": 176000000,
        "Vote_Average": 7.3
    },
    {
        "Movie_Name": "Emilia PÃ©rez",
        "Genres": ','.join(["Comedy", "Crime", "Drama", "Musical", "Thriller"]),
        "Revenue": 15000000,
        "Vote_Average": 5.5
    },
    {
        "Movie_Name": "The Brutalist",
        "Genres": ','.join(["Drama"]),
        "Revenue": 31100000,
        "Vote_Average": 7.9
    },
    {
        "Movie_Name": "Saturday Night",
        "Genres": ','.join(["Biography", "Comedy", "Drama", "History"]),
        "Revenue": 10000000,
        "Vote_Average": 7.0
    },
    {
        "Movie_Name": "The Substance",
        "Genres": ','.join(["Drama", "Horror", "Sci-Fi"]),
        "Revenue": 77000000,
        "Vote_Average": 7.3
    },
    {
        "Movie_Name": "Landman",
        "Genres": ','.join(["Drama"]),
        "Revenue": 0,
        "Vote_Average": 8.2
    },
    {
        "Movie_Name": "Gladiator II",
        "Genres": ','.join(["Action", "Adventure", "Drama"]),
        "Revenue": 461900000,
        "Vote_Average": 6.6
    },
]
for row in rows:
    stmt = insert(film_table).values(**row)
    with engine.begin() as connection:
        cursor = connection.execute(stmt)



# Cek isi tabel
stmt = select(
    film_table.c.Movie_Name,
    film_table.c.Genres,
    film_table.c.Revenue,
    film_table.c.Vote_Average,

).select_from(film_table)

with engine.connect() as connection:
    results = connection.execute(stmt).fetchall()
    print(results)

#Cek Koneksi Database
from sqlalchemy import text

with engine.connect() as con:
    rows = con.execute(text("SELECT Movie_Name from film"))
    for row in rows:
        print(row)

from llama_index.llms.groq import Groq

from llama_index.core import SQLDatabase
from llama_index.core.query_engine import NLSQLTableQueryEngine

# Inisialisasi koneksi ke database SQLAlchemy
sql_database = SQLDatabase(engine)


from llama_index.embeddings.huggingface import HuggingFaceEmbedding

embed_model = HuggingFaceEmbedding(model_name="sentence-transformers/all-MiniLM-L6-v2")

#Inisialisasi Query Engine
query_engine = NLSQLTableQueryEngine(
    sql_database=sql_database,
    tables=["film"],
    llm=llm,
    embed_model=embed_model
)

# Contoh Query
query_str = "Which film has the highest revenue?"
response = query_engine.query(query_str)

print(response)

# Fungsi chatbot
def chat_with_sqlbot(user_input):
    try:
        print("Query yang dikirim:", user_input)
        response = query_engine.query(user_input)
        print("Hasil Query:", response)
        return [{"role": "assistant", "content": str(response)}]
    except Exception as e:
        print("Error:", str(e))
        return [{"role": "assistant", "content": f"Error: {str(e)}"}]

# Buat chatbot dengan format 'messages'
with gr.Blocks() as demo:
    gr.Markdown("# Chatbot SQL Query untuk Film Database")
    chatbot = gr.Chatbot(type="messages")
    msg = gr.Textbox(label="Masukkan pertanyaan Anda:")
    send = gr.Button("Kirim")

    def respond(user_message, chat_history):
        response = chat_with_sqlbot(user_message)
        chat_history.append({"role": "user", "content": user_message})
        chat_history.extend(response)
        return "", chat_history

    send.click(respond, inputs=[msg, chatbot], outputs=[msg, chatbot])

demo.close()

demo.launch(share=True, debug=True)