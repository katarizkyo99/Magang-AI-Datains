import json
import os
import httpx
from typing import (
    Union,
    Generator,
    Iterator,
    Optional,
    List,
)
from open_webui.utils.misc import get_last_user_message
from pydantic import BaseModel
import openai
from sqlalchemy import create_engine, text
from llama_index.core import SQLDatabase
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.core.query_engine import NLSQLTableQueryEngine
from llama_index.llms.groq import Groq

from llama_index.core.indices.vector_store import VectorStoreIndex
from llama_index.core.prompts import PromptTemplate
from llama_index.core.indices.struct_store.sql_query import SQLTableRetrieverQueryEngine
from llama_index.core.objects import SQLTableSchema, ObjectIndex, SQLTableNodeMapping
from llama_index.core import ServiceContext, set_global_service_context
from llama_index.core import Settings


def koneksidb():
    db_url = "postgresql://postgres:1234@host.docker.internal:5432/film"
    engine = create_engine(db_url)
    return engine


def generate(messages):
    client = openai.OpenAI(
        base_url="https://api.groq.com/openai/v1/",
        api_key="YOUR API KEY HERE",
    )

    response = client.chat.completions.create(
        model="llama3-70b-8192",
        messages=messages,
        temperature=0,
        stream=True,
    )
    return response


class Pipe:
    name = "Magang_Chatbot"
    version = "Magang_Chatbot"
    description = "Magang_Chatbot"

    class Valves(BaseModel):
        pass

    def __init__(self):
        self.engine = koneksidb()

    async def pipe(
        self,
        body: dict,
        __user__: dict,
        __event_emitter__=None,
        __event_call__=None,
        __task__=None,
        __task_body__: Optional[dict] = None,
        __valves__=None,
    ) -> Union[str, Generator, Iterator]:

        sql_database = SQLDatabase(self.engine, include_tables=["film_table"])

        embed_model = HuggingFaceEmbedding(
            model_name="sentence-transformers/all-MiniLM-L6-v2"
        )
        Settings.embed_model = embed_model
        # ===================================================================

        messages = [
            {
                "role": "system",
                "content": "You are an AI Chatbot Film that always answers in clear and concise Indonesian and uses database references as answering material",
            }
        ]

        user_message = get_last_user_message(body["messages"])

        # ===================================================================
        table_node_mapping = SQLTableNodeMapping(sql_database)
        table_schema_objs = []
        table_schema_objs.append((SQLTableSchema(table_name="film_table")))

        obj_index = ObjectIndex.from_objects(
            table_schema_objs,
            table_node_mapping,
            VectorStoreIndex,
            embed_model=embed_model,
        )

        # ===================================================================
        instruction_1 = """
        Given an input question, first create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer. 
        You can order the results by a relevant column to return the most interesting examples in the database.
        Unless the user specifies in the question a specific number of examples to obtain, query for at most 10 results using the LIMIT clause as per the database engine. You can order the results to return the most informative data in the database.
        Never query for all the columns from a specific table, only ask for a few relevant columns given the question.
        You should use DISTINCT statements and avoid returning duplicates wherever possible.
        Do not return example data if no data is found. You have access to a SQL database, and the only results you should return are values from that database.
        Answer the user question using bahasa indonesia if possible.
        Your Final answer should return the summary of the query result. You cannot return the SQL Query itself.
        Pay attention to use only the column names that you can see in the schema description. Be careful to not query for columns that do not exist. Pay attention to which column is in which table. Also, qualify column names with the table name when needed. You are required to use the following format, each taking one line.
        Your answers should consider the history message if exist and relevant.        
        """
        # ===================================================================
        instruction_2 = """
        Use these format below depends whether you need to Query the database or one:

        1. When query is needed
        Question: Question here
        SQLQuery: SQL Query to run (Only the SQL Query, DON'T ADD ANY *. example: SELECT column FROM table)
        SQLResult: Result of the SQLQuery
        Answer: Final answer here

        2. When query not needed
        Question: Question here
        Answer: Final answer here
        """
        # ==============================================================================
        text_to_sql_prompt = """
        {instruction_1}
        Only use tables listed below.
        {schema}

        {instruction_2}
        
        Complete this with one of the format above:
        Question: {query_str}
        """

        text_to_sql_prompt = text_to_sql_prompt.replace(
            "{instruction_1}", instruction_1
        ).replace("{instruction_2}", instruction_2)

        text_to_sql_template = PromptTemplate(text_to_sql_prompt)
        retri = obj_index.as_retriever(similarity_top_k=3)

        # ==============================================================================
        llm = Groq(
            model="llama3-70b-8192",
            api_key="YOUR API KEY HERE",
        )
        Settings.llm = llm
        # ==============================================================================

        query_engine = SQLTableRetrieverQueryEngine(
            sql_database=sql_database,
            tables=["film_table"],
            table_retriever=retri,
            llm=llm,
            text_to_sql_prompt=text_to_sql_template,
        )
        # ==============================================================================

        query_result = query_engine.query(user_message)
        messages.append({"role": "user", "content": f"{query_result}"})

        print(messages)

        response = generate(messages)
        return response
